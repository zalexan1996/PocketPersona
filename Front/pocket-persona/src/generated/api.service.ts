//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class GameClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    list( cancelToken?: CancelToken): Promise<PersonaCommandResponseOfIEnumerableOfGameDto> {
        let url_ = this.baseUrl + "/Game";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<PersonaCommandResponseOfIEnumerableOfGameDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponseOfIEnumerableOfGameDto.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponseOfIEnumerableOfGameDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponseOfIEnumerableOfGameDto>(null as any);
    }

    add(model: AddGameModel, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/Game";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }

    update(id: string, model: UpdateGameModel, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/Game/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }

    delete(id: number, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/Game/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }
}

export class SocialLinkClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    list(id: number | null | undefined, page: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken): Promise<PersonaCommandResponseOfIListOfSocialLinkDto> {
        let url_ = this.baseUrl + "/SocialLink?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<PersonaCommandResponseOfIListOfSocialLinkDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponseOfIListOfSocialLinkDto.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponseOfIListOfSocialLinkDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponseOfIListOfSocialLinkDto>(null as any);
    }

    add(model: AddSocialLinkModel, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/SocialLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }

    update(id: number, model: AddSocialLinkModel, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/SocialLink/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }

    delete(id: number, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/SocialLink/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }

    listDialogue(socialLinkId: number, cancelToken?: CancelToken): Promise<PersonaCommandResponseOfIListOfSocialLinkDialogueDto> {
        let url_ = this.baseUrl + "/SocialLink/{socialLinkId}/dialogue";
        if (socialLinkId === undefined || socialLinkId === null)
            throw new Error("The parameter 'socialLinkId' must be defined.");
        url_ = url_.replace("{socialLinkId}", encodeURIComponent("" + socialLinkId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListDialogue(_response);
        });
    }

    protected processListDialogue(response: AxiosResponse): Promise<PersonaCommandResponseOfIListOfSocialLinkDialogueDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponseOfIListOfSocialLinkDialogueDto.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponseOfIListOfSocialLinkDialogueDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponseOfIListOfSocialLinkDialogueDto>(null as any);
    }

    addDialogue(socialLinkId: number, model: AddSocialLinkDialogueModel, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/SocialLink/{socialLinkId}/dialogue";
        if (socialLinkId === undefined || socialLinkId === null)
            throw new Error("The parameter 'socialLinkId' must be defined.");
        url_ = url_.replace("{socialLinkId}", encodeURIComponent("" + socialLinkId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddDialogue(_response);
        });
    }

    protected processAddDialogue(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }

    listDialogue2( cancelToken?: CancelToken): Promise<PersonaCommandResponseOfIListOfSocialLinkDialogueDto> {
        let url_ = this.baseUrl + "/SocialLink/dialogue";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListDialogue2(_response);
        });
    }

    protected processListDialogue2(response: AxiosResponse): Promise<PersonaCommandResponseOfIListOfSocialLinkDialogueDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponseOfIListOfSocialLinkDialogueDto.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponseOfIListOfSocialLinkDialogueDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponseOfIListOfSocialLinkDialogueDto>(null as any);
    }

    deleteDialogue(dialogueId: number, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/SocialLink/dialogue/{dialogueId}";
        if (dialogueId === undefined || dialogueId === null)
            throw new Error("The parameter 'dialogueId' must be defined.");
        url_ = url_.replace("{dialogueId}", encodeURIComponent("" + dialogueId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteDialogue(_response);
        });
    }

    protected processDeleteDialogue(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }
}

export class CharacterClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    list(gameId: number | null | undefined, page: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken): Promise<PersonaCommandResponseOfIEnumerableOfCharacterDto> {
        let url_ = this.baseUrl + "/Character?";
        if (gameId !== undefined && gameId !== null)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<PersonaCommandResponseOfIEnumerableOfCharacterDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponseOfIEnumerableOfCharacterDto.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponseOfIEnumerableOfCharacterDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponseOfIEnumerableOfCharacterDto>(null as any);
    }

    add(model: AddCharacterModel, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/Character";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }

    update(id: string, model: UpdateCharacterModel, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/Character/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }

    delete(id: number, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/Character/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }
}

export class ArcanaClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    list(id: number | null | undefined, page: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken): Promise<PersonaCommandResponseOfIEnumerableOfArcanaDto> {
        let url_ = this.baseUrl + "/Arcana?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<PersonaCommandResponseOfIEnumerableOfArcanaDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponseOfIEnumerableOfArcanaDto.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponseOfIEnumerableOfArcanaDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponseOfIEnumerableOfArcanaDto>(null as any);
    }

    add(model: AddArcanaModel, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/Arcana";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }

    update(id: number | undefined, model: AddArcanaModel, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/Arcana?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }

    delete(id: number, cancelToken?: CancelToken): Promise<PersonaCommandResponse> {
        let url_ = this.baseUrl + "/Arcana/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<PersonaCommandResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonaCommandResponse.fromJS(resultData200);
            return Promise.resolve<PersonaCommandResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PersonaCommandResponse>(null as any);
    }
}

export class PersonaCommandResponse implements IPersonaCommandResponse {
    isValid?: boolean;
    errors?: { [key: string]: string; };

    constructor(data?: IPersonaCommandResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isValid = _data["isValid"];
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key];
                }
            }
        }
    }

    static fromJS(data: any): PersonaCommandResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PersonaCommandResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isValid"] = this.isValid;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        return data;
    }
}

export interface IPersonaCommandResponse {
    isValid?: boolean;
    errors?: { [key: string]: string; };
}

export class PersonaCommandResponseOfIEnumerableOfGameDto extends PersonaCommandResponse implements IPersonaCommandResponseOfIEnumerableOfGameDto {
    result?: GameDto[] | undefined;

    constructor(data?: IPersonaCommandResponseOfIEnumerableOfGameDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(GameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonaCommandResponseOfIEnumerableOfGameDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonaCommandResponseOfIEnumerableOfGameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPersonaCommandResponseOfIEnumerableOfGameDto extends IPersonaCommandResponse {
    result?: GameDto[] | undefined;
}

export class GameDto implements IGameDto {
    id?: number;
    name?: string;

    constructor(data?: IGameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GameDto {
        data = typeof data === 'object' ? data : {};
        let result = new GameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IGameDto {
    id?: number;
    name?: string;
}

export class AddGameModel implements IAddGameModel {
    name?: string;

    constructor(data?: IAddGameModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddGameModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddGameModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IAddGameModel {
    name?: string;
}

export class UpdateGameModel implements IUpdateGameModel {
    id?: number;
    name?: string;

    constructor(data?: IUpdateGameModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateGameModel {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateGameModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUpdateGameModel {
    id?: number;
    name?: string;
}

export class PersonaCommandResponseOfIListOfSocialLinkDto extends PersonaCommandResponse implements IPersonaCommandResponseOfIListOfSocialLinkDto {
    result?: SocialLinkDto[] | undefined;

    constructor(data?: IPersonaCommandResponseOfIListOfSocialLinkDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(SocialLinkDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonaCommandResponseOfIListOfSocialLinkDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonaCommandResponseOfIListOfSocialLinkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPersonaCommandResponseOfIListOfSocialLinkDto extends IPersonaCommandResponse {
    result?: SocialLinkDto[] | undefined;
}

export class SocialLinkDto implements ISocialLinkDto {
    id?: number;
    name?: string;
    characterId?: number;
    arcanaId?: number;
    unlockConditions?: string;
    dialogueIds?: number[];

    constructor(data?: ISocialLinkDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.characterId = _data["characterId"];
            this.arcanaId = _data["arcanaId"];
            this.unlockConditions = _data["unlockConditions"];
            if (Array.isArray(_data["dialogueIds"])) {
                this.dialogueIds = [] as any;
                for (let item of _data["dialogueIds"])
                    this.dialogueIds!.push(item);
            }
        }
    }

    static fromJS(data: any): SocialLinkDto {
        data = typeof data === 'object' ? data : {};
        let result = new SocialLinkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["characterId"] = this.characterId;
        data["arcanaId"] = this.arcanaId;
        data["unlockConditions"] = this.unlockConditions;
        if (Array.isArray(this.dialogueIds)) {
            data["dialogueIds"] = [];
            for (let item of this.dialogueIds)
                data["dialogueIds"].push(item);
        }
        return data;
    }
}

export interface ISocialLinkDto {
    id?: number;
    name?: string;
    characterId?: number;
    arcanaId?: number;
    unlockConditions?: string;
    dialogueIds?: number[];
}

export class AddSocialLinkModel implements IAddSocialLinkModel {
    name?: string;
    characterId?: number;
    arcanaId?: number;
    unlockConditions?: string;

    constructor(data?: IAddSocialLinkModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.characterId = _data["characterId"];
            this.arcanaId = _data["arcanaId"];
            this.unlockConditions = _data["unlockConditions"];
        }
    }

    static fromJS(data: any): AddSocialLinkModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddSocialLinkModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["characterId"] = this.characterId;
        data["arcanaId"] = this.arcanaId;
        data["unlockConditions"] = this.unlockConditions;
        return data;
    }
}

export interface IAddSocialLinkModel {
    name?: string;
    characterId?: number;
    arcanaId?: number;
    unlockConditions?: string;
}

export class PersonaCommandResponseOfIListOfSocialLinkDialogueDto extends PersonaCommandResponse implements IPersonaCommandResponseOfIListOfSocialLinkDialogueDto {
    result?: SocialLinkDialogueDto[] | undefined;

    constructor(data?: IPersonaCommandResponseOfIListOfSocialLinkDialogueDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(SocialLinkDialogueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonaCommandResponseOfIListOfSocialLinkDialogueDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonaCommandResponseOfIListOfSocialLinkDialogueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPersonaCommandResponseOfIListOfSocialLinkDialogueDto extends IPersonaCommandResponse {
    result?: SocialLinkDialogueDto[] | undefined;
}

export class SocialLinkDialogueDto implements ISocialLinkDialogueDto {
    id?: number;
    socialLinkId?: number;
    text?: string;
    rank?: number;
    order?: number;

    constructor(data?: ISocialLinkDialogueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.socialLinkId = _data["socialLinkId"];
            this.text = _data["text"];
            this.rank = _data["rank"];
            this.order = _data["order"];
        }
    }

    static fromJS(data: any): SocialLinkDialogueDto {
        data = typeof data === 'object' ? data : {};
        let result = new SocialLinkDialogueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["socialLinkId"] = this.socialLinkId;
        data["text"] = this.text;
        data["rank"] = this.rank;
        data["order"] = this.order;
        return data;
    }
}

export interface ISocialLinkDialogueDto {
    id?: number;
    socialLinkId?: number;
    text?: string;
    rank?: number;
    order?: number;
}

export class AddSocialLinkDialogueModel implements IAddSocialLinkDialogueModel {
    text?: string;
    rank?: number;
    order?: number;

    constructor(data?: IAddSocialLinkDialogueModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.rank = _data["rank"];
            this.order = _data["order"];
        }
    }

    static fromJS(data: any): AddSocialLinkDialogueModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddSocialLinkDialogueModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["rank"] = this.rank;
        data["order"] = this.order;
        return data;
    }
}

export interface IAddSocialLinkDialogueModel {
    text?: string;
    rank?: number;
    order?: number;
}

export class PersonaCommandResponseOfIEnumerableOfCharacterDto extends PersonaCommandResponse implements IPersonaCommandResponseOfIEnumerableOfCharacterDto {
    result?: CharacterDto[] | undefined;

    constructor(data?: IPersonaCommandResponseOfIEnumerableOfCharacterDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(CharacterDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonaCommandResponseOfIEnumerableOfCharacterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonaCommandResponseOfIEnumerableOfCharacterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPersonaCommandResponseOfIEnumerableOfCharacterDto extends IPersonaCommandResponse {
    result?: CharacterDto[] | undefined;
}

export class CharacterDto implements ICharacterDto {
    id?: number;
    name?: string;
    gifts?: string[];
    gameId?: number;

    constructor(data?: ICharacterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["gifts"])) {
                this.gifts = [] as any;
                for (let item of _data["gifts"])
                    this.gifts!.push(item);
            }
            this.gameId = _data["gameId"];
        }
    }

    static fromJS(data: any): CharacterDto {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.gifts)) {
            data["gifts"] = [];
            for (let item of this.gifts)
                data["gifts"].push(item);
        }
        data["gameId"] = this.gameId;
        return data;
    }
}

export interface ICharacterDto {
    id?: number;
    name?: string;
    gifts?: string[];
    gameId?: number;
}

export class AddCharacterModel implements IAddCharacterModel {
    name?: string;
    gameId?: number;
    gifts?: string[];

    constructor(data?: IAddCharacterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.gameId = _data["gameId"];
            if (Array.isArray(_data["gifts"])) {
                this.gifts = [] as any;
                for (let item of _data["gifts"])
                    this.gifts!.push(item);
            }
        }
    }

    static fromJS(data: any): AddCharacterModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddCharacterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["gameId"] = this.gameId;
        if (Array.isArray(this.gifts)) {
            data["gifts"] = [];
            for (let item of this.gifts)
                data["gifts"].push(item);
        }
        return data;
    }
}

export interface IAddCharacterModel {
    name?: string;
    gameId?: number;
    gifts?: string[];
}

export class UpdateCharacterModel implements IUpdateCharacterModel {
    id?: number;
    gameId?: number;
    name?: string;
    gifts?: string[];

    constructor(data?: IUpdateCharacterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gameId = _data["gameId"];
            this.name = _data["name"];
            if (Array.isArray(_data["gifts"])) {
                this.gifts = [] as any;
                for (let item of _data["gifts"])
                    this.gifts!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateCharacterModel {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCharacterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gameId"] = this.gameId;
        data["name"] = this.name;
        if (Array.isArray(this.gifts)) {
            data["gifts"] = [];
            for (let item of this.gifts)
                data["gifts"].push(item);
        }
        return data;
    }
}

export interface IUpdateCharacterModel {
    id?: number;
    gameId?: number;
    name?: string;
    gifts?: string[];
}

export class PersonaCommandResponseOfIEnumerableOfArcanaDto extends PersonaCommandResponse implements IPersonaCommandResponseOfIEnumerableOfArcanaDto {
    result?: ArcanaDto[] | undefined;

    constructor(data?: IPersonaCommandResponseOfIEnumerableOfArcanaDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(ArcanaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonaCommandResponseOfIEnumerableOfArcanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonaCommandResponseOfIEnumerableOfArcanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPersonaCommandResponseOfIEnumerableOfArcanaDto extends IPersonaCommandResponse {
    result?: ArcanaDto[] | undefined;
}

export class ArcanaDto implements IArcanaDto {
    id?: number;
    name?: string;
    gameIds?: number[];

    constructor(data?: IArcanaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["gameIds"])) {
                this.gameIds = [] as any;
                for (let item of _data["gameIds"])
                    this.gameIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ArcanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new ArcanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.gameIds)) {
            data["gameIds"] = [];
            for (let item of this.gameIds)
                data["gameIds"].push(item);
        }
        return data;
    }
}

export interface IArcanaDto {
    id?: number;
    name?: string;
    gameIds?: number[];
}

export class AddArcanaModel implements IAddArcanaModel {
    name?: string;
    gameIds?: number[];

    constructor(data?: IAddArcanaModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["gameIds"])) {
                this.gameIds = [] as any;
                for (let item of _data["gameIds"])
                    this.gameIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AddArcanaModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddArcanaModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.gameIds)) {
            data["gameIds"] = [];
            for (let item of this.gameIds)
                data["gameIds"].push(item);
        }
        return data;
    }
}

export interface IAddArcanaModel {
    name?: string;
    gameIds?: number[];
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}